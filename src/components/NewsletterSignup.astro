---
// src/components/NewsletterSignup.astro
export interface Props {
  style?: 'inline' | 'modal' | 'sidebar';
  title?: string;
  description?: string;
  placeholder?: string;
  buttonText?: string;
  showBenefits?: boolean;
  className?: string;
}

const {
  style = 'inline',
  title = 'Stay Informed',
  description = 'Get weekly marine detailing tips and product reviews delivered to your inbox.',
  placeholder = 'Enter your email address',
  buttonText = 'Subscribe',
  showBenefits = true,
  className = ''
} = Astro.props;
---

<div class={`newsletter-signup ${className}`} data-style={style}>
  {style === 'inline' && (
    <div class="bg-blue-600 py-16">
      <div class="max-w-4xl mx-auto px-8 text-center">
        <h2 class="text-3xl font-light text-white mb-6">{title}</h2>
        <p class="text-lg text-blue-100 mb-8 font-light max-w-2xl mx-auto">
          {description}
        </p>
        
        <div class="max-w-md mx-auto mb-6">
          <form class="newsletter-form flex border border-blue-500" data-newsletter-form>
            <input 
              type="email" 
              name="email"
              placeholder={placeholder}
              required
              class="flex-1 px-6 py-4 bg-transparent text-white placeholder-blue-200 border-none focus:outline-none"
            >
            <button 
              type="submit"
              class="bg-white text-blue-600 px-8 py-4 font-medium hover:bg-blue-50 transition-colors disabled:opacity-50"
              data-submit-btn
            >
              <span data-submit-text>{buttonText}</span>
              <span data-submit-loading class="hidden">...</span>
            </button>
          </form>
          
          <!-- Success/Error Messages -->
          <div data-success-message class="hidden mt-4 p-3 bg-green-100 text-green-800 text-sm">
            Thanks for subscribing! Check your email to confirm.
          </div>
          <div data-error-message class="hidden mt-4 p-3 bg-red-100 text-red-800 text-sm">
            Something went wrong. Please try again.
          </div>
        </div>
        
        {showBenefits && (
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm text-blue-100 max-w-2xl mx-auto">
            <div class="flex items-center justify-center gap-2">
              <div class="w-4 h-4 bg-green-400 rounded-full flex items-center justify-center">
                <span class="text-white text-xs">✓</span>
              </div>
              <span>Weekly Tips</span>
            </div>
            <div class="flex items-center justify-center gap-2">
              <div class="w-4 h-4 bg-green-400 rounded-full flex items-center justify-center">
                <span class="text-white text-xs">✓</span>
              </div>
              <span>Product Reviews</span>
            </div>
            <div class="flex items-center justify-center gap-2">
              <div class="w-4 h-4 bg-green-400 rounded-full flex items-center justify-center">
                <span class="text-white text-xs">✓</span>
              </div>
              <span>No Spam</span>
            </div>
          </div>
        )}
        
        <p class="text-xs text-blue-200 mt-4">
          Unsubscribe anytime. See our <a href="/privacy-policy" class="underline hover:no-underline">privacy policy</a>.
        </p>
      </div>
    </div>
  )}
  
  {style === 'sidebar' && (
    <div class="bg-gray-50 border border-gray-200 p-6">
      <h3 class="font-medium text-gray-900 mb-3">{title}</h3>
      <p class="text-sm text-gray-600 mb-4 font-light">
        {description}
      </p>
      
      <form class="newsletter-form space-y-3" data-newsletter-form>
        <input 
          type="email" 
          name="email"
          placeholder={placeholder}
          required
          class="w-full px-3 py-2 border border-gray-300 text-sm focus:outline-none focus:border-gray-900 transition-colors"
        >
        <button 
          type="submit"
          class="w-full bg-gray-900 text-white py-2 text-sm font-medium hover:bg-gray-800 transition-colors disabled:opacity-50"
          data-submit-btn
        >
          <span data-submit-text>{buttonText}</span>
          <span data-submit-loading class="hidden">...</span>
        </button>
      </form>
      
      <!-- Success/Error Messages -->
      <div data-success-message class="hidden mt-3 p-2 bg-green-100 text-green-800 text-xs">
        Thanks for subscribing!
      </div>
      <div data-error-message class="hidden mt-3 p-2 bg-red-100 text-red-800 text-xs">
        Please try again.
      </div>
      
      <p class="text-xs text-gray-500 mt-3">
        No spam. Unsubscribe anytime.
      </p>
    </div>
  )}
  
  {style === 'modal' && (
    <div id="newsletter-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white max-w-md w-full p-8 relative">
        <button 
          id="close-modal"
          class="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
          aria-label="Close"
        >
          ✕
        </button>
        
        <h2 class="text-2xl font-medium text-gray-900 mb-4">{title}</h2>
        <p class="text-gray-600 mb-6 font-light">
          {description}
        </p>
        
        <form class="newsletter-form space-y-4" data-newsletter-form>
          <input 
            type="email" 
            name="email"
            placeholder={placeholder}
            required
            class="w-full px-4 py-3 border border-gray-300 focus:outline-none focus:border-gray-900 transition-colors"
          >
          <button 
            type="submit"
            class="w-full bg-gray-900 text-white py-3 font-medium hover:bg-gray-800 transition-colors disabled:opacity-50"
            data-submit-btn
          >
            <span data-submit-text>{buttonText}</span>
            <span data-submit-loading class="hidden">...</span>
          </button>
        </form>
        
        <!-- Success/Error Messages -->
        <div data-success-message class="hidden mt-4 p-3 bg-green-100 text-green-800 text-sm">
          Thanks for subscribing! Check your email to confirm.
        </div>
        <div data-error-message class="hidden mt-4 p-3 bg-red-100 text-red-800 text-sm">
          Something went wrong. Please try again.
        </div>
        
        <p class="text-xs text-gray-500 mt-4">
          We respect your privacy. Unsubscribe at any time.
        </p>
      </div>
    </div>
  )}
</div>

<script>
  class NewsletterManager {
    constructor() {
      this.initializeForms();
      this.initializeModal();
      this.setupExitIntent();
    }

    initializeForms() {
      const forms = document.querySelectorAll('[data-newsletter-form]');
      forms.forEach(form => {
        form.addEventListener('submit', this.handleSubmit.bind(this));
      });
    }

    initializeModal() {
      const modal = document.getElementById('newsletter-modal');
      const closeBtn = document.getElementById('close-modal');
      
      if (modal && closeBtn) {
        closeBtn.addEventListener('click', () => {
          modal.classList.add('hidden');
        });
        
        // Close on backdrop click
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            modal.classList.add('hidden');
          }
        });
        
        // Close on escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            modal.classList.add('hidden');
          }
        });
      }
    }

    setupExitIntent() {
      let hasShownModal = localStorage.getItem('newsletter-modal-shown');
      let mouseLeft = false;

      if (!hasShownModal) {
        document.addEventListener('mouseleave', (e) => {
          if (e.clientY <= 0 && !mouseLeft) {
            mouseLeft = true;
            this.showModal();
          }
        });

        // Also show after 30 seconds of scrolling
        let scrollTimer;
        window.addEventListener('scroll', () => {
          clearTimeout(scrollTimer);
          scrollTimer = setTimeout(() => {
            if (window.scrollY > 1000 && !hasShownModal) {
              this.showModal();
            }
          }, 30000);
        });
      }
    }

    showModal() {
      const modal = document.getElementById('newsletter-modal');
      if (modal) {
        modal.classList.remove('hidden');
        localStorage.setItem('newsletter-modal-shown', 'true');
      }
    }

    async handleSubmit(e) {
      e.preventDefault();
      
      const form = e.target;
      const submitBtn = form.querySelector('[data-submit-btn]');
      const submitText = form.querySelector('[data-submit-text]');
      const submitLoading = form.querySelector('[data-submit-loading]');
      const successMessage = form.querySelector('[data-success-message]');
      const errorMessage = form.querySelector('[data-error-message]');
      const emailInput = form.querySelector('input[name="email"]');
      
      // Clear previous messages
      successMessage?.classList.add('hidden');
      errorMessage?.classList.add('hidden');
      
      // Show loading state
      submitBtn.disabled = true;
      submitText?.classList.add('hidden');
      submitLoading?.classList.remove('hidden');
      
      try {
        // Get form data
        const formData = new FormData(form);
        const email = formData.get('email');
        
        // Validate email
        if (!this.isValidEmail(email)) {
          throw new Error('Invalid email address');
        }
        
        // Here you would integrate with your email service
        // For now, we'll simulate the API call
        await this.subscribeUser(email);
        
        // Show success
        successMessage?.classList.remove('hidden');
        form.reset();
        
        // Store subscription status
        localStorage.setItem('newsletter-subscribed', 'true');
        
        // Close modal if it's a modal form
        const modal = document.getElementById('newsletter-modal');
        if (modal && form.closest('#newsletter-modal')) {
          setTimeout(() => modal.classList.add('hidden'), 2000);
        }
        
      } catch (error) {
        console.error('Newsletter subscription error:', error);
        errorMessage?.classList.remove('hidden');
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitText?.classList.remove('hidden');
        submitLoading?.classList.add('hidden');
      }
    }

    async subscribeUser(email) {
      // This is where you'd integrate with your email service
      // Examples: Mailchimp, ConvertKit, Sendinblue, etc.
      
      // For now, simulate API call
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          // Simulate success most of the time
          if (Math.random() > 0.1) {
            resolve({ success: true });
          } else {
            reject(new Error('Subscription failed'));
          }
        }, 1000);
      });
      
      /* Example integration with ConvertKit:
      const response = await fetch('https://api.convertkit.com/v3/forms/YOUR_FORM_ID/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          api_key: 'YOUR_API_KEY',
          email: email,
          tags: ['salt-life-detail-website']
        })
      });
      
      if (!response.ok) {
        throw new Error('Subscription failed');
      }
      
      return response.json();
      */
    }

    isValidEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new NewsletterManager();
  });
</script>