---
// src/components/marine/Breadcrumbs.astro
export interface BreadcrumbItem {
  label: string;
  href?: string;
}

export interface Props {
  items?: BreadcrumbItem[];
  className?: string;
  showHome?: boolean;
  separator?: string;
  generateFromPath?: boolean;
}

const {
  items = [],
  className = '',
  showHome = true,
  separator = '/',
  generateFromPath = true
} = Astro.props;

// Auto-generate breadcrumbs from current path if no items provided
let breadcrumbItems: BreadcrumbItem[] = items;

if (generateFromPath && items.length === 0) {
  const currentPath = Astro.url.pathname;
  const pathSegments = currentPath.split('/').filter(segment => segment !== '');
  
  // Start with home if enabled
  if (showHome) {
    breadcrumbItems = [{ label: 'Home', href: '/' }];
  }
  
  // Build breadcrumbs from path segments
  let currentHref = '';
  pathSegments.forEach((segment, index) => {
    currentHref += `/${segment}`;
    
    // Convert segment to readable label
    const label = segment
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
    
    // Last segment doesn't get a link (current page)
    const isLast = index === pathSegments.length - 1;
    breadcrumbItems.push({
      label,
      href: isLast ? undefined : currentHref
    });
  });
}

// Don't render if we only have home breadcrumb
if (breadcrumbItems.length <= 1 && showHome) {
  breadcrumbItems = [];
}

// Add structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbItems.map((item, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "name": item.label,
    ...(item.href && { "item": new URL(item.href, Astro.site).toString() })
  }))
};
---

{breadcrumbItems.length > 0 && (
  <>
    <!-- Structured Data for SEO -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    
    <!-- Breadcrumb Navigation -->
    <nav class={`breadcrumbs ${className}`} aria-label="Breadcrumb navigation">
      <div class="max-w-6xl mx-auto px-8 py-4">
        <ol class="flex items-center space-x-2 text-sm">
          {breadcrumbItems.map((item, index) => (
            <li class="flex items-center">
              {index > 0 && (
                <span class="text-gray-400 mx-2" aria-hidden="true">
                  {separator === '/' ? (
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                  ) : (
                    separator
                  )}
                </span>
              )}
              
              {item.href ? (
                <a 
                  href={item.href}
                  class="text-gray-600 hover:text-gray-900 transition-colors duration-150 font-light"
                >
                  {item.label}
                </a>
              ) : (
                <span 
                  class="text-gray-900 font-medium"
                  aria-current="page"
                >
                  {item.label}
                </span>
              )}
            </li>
          ))}
        </ol>
      </div>
    </nav>
  </>
)}

<style>
  .breadcrumbs {
    background-color: rgb(249 250 251);
    border-bottom: 1px solid rgb(229 231 235);
  }
  
  .breadcrumbs ol {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .breadcrumbs li {
    display: inline-flex;
    align-items: center;
  }
  
  /* Ensure proper spacing and alignment */
  .breadcrumbs a:hover {
    text-decoration: none;
  }
  
  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    .breadcrumbs {
      padding: 0.5rem 1rem;
    }
    
    .breadcrumbs ol {
      font-size: 0.75rem;
      line-height: 1rem;
    }
    
    /* Truncate long breadcrumb labels on mobile */
    .breadcrumbs li:not(:last-child) a,
    .breadcrumbs li:not(:last-child) span {
      max-width: 5rem;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  }
</style>